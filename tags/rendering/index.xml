<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rendering on Megan Reddy</title>
    <link>https://meganr28.github.io/tags/rendering/</link>
    <description>Recent content in Rendering on Megan Reddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Megan Reddy</copyright><atom:link href="https://meganr28.github.io/tags/rendering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CUDA Path Tracer</title>
      <link>https://meganr28.github.io/code/cudapathtracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://meganr28.github.io/code/cudapathtracer/</guid>
      <description>October 2022
Description: A GPU-accelerated physically-based path tracer written with CUDA and C++. Parallelizes several steps such as camera ray generation, ray intersections, shading, and writing to the final output image.
See Github for full technical details and more images.
Features:
 Ideal diffuse, perfectly specular, imperfectly specular, and refractive surfaces Path continuation/termination with stream compaction Material sorting Caching first bounce intersections Acceleration structures  Linear Bounding Volume Hierarchy (LBVH) Bounding Volume Hierarchy (with Midpoint and SAH split methods)   Russian roulette ray termination Depth-of-field Stochastic sampled anti-aliasing Arbitrary mesh loading (with bounding box culling) Reinhard operator and gamma correction (conversion to sRGB)  </description>
    </item>
    
    <item>
      <title>DXR Path Tracer with ReSTIR</title>
      <link>https://meganr28.github.io/code/dxrpathtracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://meganr28.github.io/code/dxrpathtracer/</guid>
      <description>December 2022
Description: A basic DXR Path Tracer that implements the Reservoir-based Spatiotemporal Importance Resampling (ReSTIR) algorithm first introduced by Bitterli et al. at SIGGRAPH 2020. The goal is to improve convergence in scenes with many dynamic lights where standard direct lighting with one randomly chosen light would not be as successful. This implementation also uses NVIDIA&amp;rsquo;s Falcor framework for scene loading and CPU-side setup.
See Github and this slide deck for full technical and implementation details.</description>
    </item>
    
    <item>
      <title>Forward&#43; and Clustered Deferred Shading</title>
      <link>https://meganr28.github.io/code/deferredshading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://meganr28.github.io/code/deferredshading/</guid>
      <description>October 2022
Description: A WebGL implementation of the forward, forward+, and clustered deferred rendering methods for a scene with a large number of dynamic point lights. The forward+ and clustered deferred algorithms use light clustering to optimize the process of finding which lights affect the current fragment.
See Github for full technical and implementation details.
Features:
 Optimized rendering of many dynamic lights by splitting the view frustum into clusters and assigning lights to each cluster Lambertian and Blinn-Phong shading G-Buffer optimizations  Oct-encoding normals Reconstructing world space position using camera matrices and depth    </description>
    </item>
    
    <item>
      <title>GPU-Accelerated Null-Scattering Volumetric Path Tracer</title>
      <link>https://meganr28.github.io/code/nullvolumes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://meganr28.github.io/code/nullvolumes/</guid>
      <description>December 2022
Description: The null scattering path integral formulation allows us to perform MIS for any type of media (homogeneous or heterogeneous). Previous MIS techniques were unbiased only for homogeneous volumes, but this technique allows us to perform unbiased MIS for heterogeneous volumes as well. We implement a GPU-accelerated version of the algorithm using CUDA and NanoVDB for reading volumetric data. Additionally, we use some volumetric models from EmberGen.
See our Github for full technical and implementation details.</description>
    </item>
    
    <item>
      <title>OpenGL Path Tracer</title>
      <link>https://meganr28.github.io/code/glslpathtracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://meganr28.github.io/code/glslpathtracer/</guid>
      <description>April 2022
Description: An interactive GPU path tracer written in GLSL. Uses physically-based techniques described in PBRT (Physically Based Rendering, 3rd Edition). The main render loop iterates through a maximum number of bounces per fragment, attenuating ray throughput at each interaction. Additionally, render passes are summed each iteration to produce an image that converges, otherwise it would only display a single iteration. Unfortunately, I am not able to share the code for this project, but I have attached some more renders below:</description>
    </item>
    
  </channel>
</rss>
