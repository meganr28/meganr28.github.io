<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Megan Reddy</title>
    <link>http://example.org/</link>
    <description>Recent content in Home on Megan Reddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3D Modeling</title>
      <link>http://example.org/art_pages/modeling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/art_pages/modeling/</guid>
      <description>3D Modeling Nancy Drew&amp;rsquo;s Shadow Ranch Description: A reimagination of a scene from one of my favorite childhood games, Nancy Drew: The Secret of Shadow Ranch (2004).
Programs: Maya, Substance Painter, Substance Designer, Arnold
 Music Room Description: A model of the room (with some additions) in this photo.
Programs: Maya and Arnold
 Katara Character Modeling Description: A character model of Katara from Avatar: The Last Airbender.
Programs: Maya and Arnold</description>
    </item>
    
    <item>
      <title>3D Rasterizer</title>
      <link>http://example.org/old_pages/rasterizer_uva/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/old_pages/rasterizer_uva/</guid>
      <description>3D Rasterizer in Python October 2020
Description: For my Introduction to Computer Graphics class at the University of Virginia, I created a 3D rasterizer that implements the pipeline for rasterizing triangles.
Features:
 Transformations (model/view, projection, rotation, translation, scaling, and lookat) Per-pixel clipping - pixels with a z-value less than 0 or greater than 1 are not drawn Depth buffer check Implements DDA algorithm for drawing lines Supports sun lights coming from a specified direction Allows an arbitrary number of lights and sums their contributions Uses Lambert&amp;rsquo;s Law for illumination  Improvements:</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://example.org/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/about/</guid>
      <description>About Me I am a master&amp;rsquo;s student at the University of Pennsylvania pursuing an MSE in Computer Graphics and Game Technology (exp. May 2023). I received my bachelor&amp;rsquo;s degree in Computer Science from the University of Virginia in May 2021. By studying computer graphics, I am hoping to explore the intersection between mathematics, art, and programming and use them to develop tools for artists.
In my free time, I enjoy making digital and traditional art, video editing, and playing the violin.</description>
    </item>
    
    <item>
      <title>Animation</title>
      <link>http://example.org/old_pages/animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/old_pages/animation/</guid>
      <description>Animation 1. Animated Short Film: &amp;ldquo;Monsoon&amp;rdquo; December 2019
 University of Virginia ARCH 5420 Final Project
Description: I created a 1-3 minute animation incorporating themes from the entire semester (time, light, etc.).
Features and Responsibilities:
 Modeled, shaded, rigged, and animated all characters and settings (with the exception of the gate and power line - courtesy of TurboSquid) MEL scripting to manipulate the rain, wind, and light intensity Rendered over 3,500 frames in V-Ray using multiple computers Features V-Ray Mesh Lighting and Environmental Fog  Future Work:</description>
    </item>
    
    <item>
      <title>Art</title>
      <link>http://example.org/art/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/art/</guid>
      <description>Art Samples  Digital Art 3D Modeling  </description>
    </item>
    
    <item>
      <title>Code</title>
      <link>http://example.org/code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code/</guid>
      <description>Rendering  GPU Path Tracer CPU Path Tracer OpenGL Shaders Rasterizer and Camera  Geometry Processing  Cubic Stylization Authoring Tool Micro Maya Mesh Editor  Other  Mini Minecraft  </description>
    </item>
    
    <item>
      <title>CPU Path Tracer</title>
      <link>http://example.org/code_pages/pathtracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/pathtracer/</guid>
      <description>CPU Path Tracer March 2022
Description: A path tracer implemented using the Physically Based Rendering textbook.
Features:
 Full Lighting Integrator Russian Roulette ray termination Multiple Importance Sampling Diffuse, reflective, and transmissive materials Thin lens camera/depth of field Microfacet BRDF Area, point, and spot lights  </description>
    </item>
    
    <item>
      <title>Cubic Stylization Authoring Tool</title>
      <link>http://example.org/code_pages/cubestylization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/cubestylization/</guid>
      <description>Cubic Stylization Authoring Tool May 2022
Description: A Maya plugin for stylized 3D surface deformation. Our authoring tool takes an input mush and deforms it to exhibit cube-like geometry while preserving surface detail. This was developed with teammate Nick Moon.
Paper: Cubic Stylization, Hsueh-Ti Derek Liu and Alec Jacobson, SIGGRAPH Asia 2019
Features:
 Basic cubification of shapes through minimization of ARAP energy Extension to other polyhedral target shapes (tetrahedron, octahedron, etc.</description>
    </item>
    
    <item>
      <title>Curve Editor</title>
      <link>http://example.org/old_pages/curveeditor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/old_pages/curveeditor/</guid>
      <description>Animation Curve Editor in C++ October 2021
Description: An interactive animation and spline curve editor with a Unity plugin.
Features:
 Linear, cubic Catmull-Rom, and Hermite spline interpolation Three Bezier curve computation methods: Bernstein polynomials, de Casteljau, Matrix method Euler angle and quaternion spline interpolation  </description>
    </item>
    
    <item>
      <title>Digital Art</title>
      <link>http://example.org/art_pages/digitalart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/art_pages/digitalart/</guid>
      <description>Digital Art Mountain Sky Program: Procreate
Description: A quick painting of an early morning sky and mountains.
 Honey Jar Program: Procreate
Description: A stylized painting of various objects such as a honey jar and orange.
 Labrador Retriever Program: Procreate
Description: This drawing was inspired by my 14-year-old chocolate Labrador Retriever who always has a goofy smile on her face.
 Hot Chocolate Program: Procreate
Description: I drew this from a photo I took at our local coffee shop.</description>
    </item>
    
    <item>
      <title>GPU Path Tracer</title>
      <link>http://example.org/code_pages/gpupath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/gpupath/</guid>
      <description>GPU Path Tracer April 2022
Description: An interactive GPU path tracer written in GLSL.
Features:
 Full Lighting Integrator Diffuse, specular, and transmissive materials Signed distance functions Environment lighting Procedurally-generated textures Albedo and normal mapping Thin lens camera/depth of field  </description>
    </item>
    
    <item>
      <title>Mini Maya</title>
      <link>http://example.org/code_pages/maya/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/maya/</guid>
      <description>Micro Maya Mesh Editor in C++ October 2021
Description: A mesh editor application in the style of Autodesk Maya.
Features:
 Half-edge mesh data structure implementation Interactive GUI for selecting vertices, faces, and half-edges in the mesh Topology editing functions, including split edge and triangulation Catmull-Clark subdivision for mesh smoothing Face extrusion JSON/OBJ file importing Bind skeleton to mesh Linear blend skinning  </description>
    </item>
    
    <item>
      <title>Mini Minecraft</title>
      <link>http://example.org/code_pages/minecraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/minecraft/</guid>
      <description>Mini Minecraft December 2021
Description: An implementation of the popular 3D world exploration game Minecraft and based on the TV series Avatar: The Last Airbender. This was a group project with two other students.
My Contributions:
 Procedural terrain Mountain, grassland, island, and tundra biomes Multithreaded terrain generation Procedural sky Procedural assets (crystals, boats, trees) Lava and green crystal placement (glow implemented by teammate)  </description>
    </item>
    
    <item>
      <title>Monte Carlo Path Tracer</title>
      <link>http://example.org/old_pages/pathtracer_uva/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/old_pages/pathtracer_uva/</guid>
      <description>Monte Carlo Path Tracer in C++ November 2020
Utah Teapot (50 samples)
Description: For my final project in Introduction to Computer Graphics at the University of Virginia, I extended a ray tracer I wrote into a unidirectional path tracer. I translated my original Python implementation into C++ for improved performance.
Features:
 Monte Carlo sampling for global illumination Sampling of area lights (produces soft shadows) Color bleeding Gamma correction Ray-sphere, triangle, plane, and rectangle intersections Diffuse, reflective, and refractive materials  Improvements:</description>
    </item>
    
    <item>
      <title>OpenGL Shaders</title>
      <link>http://example.org/code_pages/opengl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/opengl/</guid>
      <description>OpenGL Shaders in C++ and GLSL October 2021
Description: An implementation of various OpenGL surface and post-process shaders.
Features (in order of appearance):
 Surface shaders: Blinn-Phong, Matcap, Iridescent Vertex deformation shader using Fractal Brownian Motion Post-process shaders: Greyscale and Vignette, Gaussian Blur, Sobel Filter, Bloom Two Worley noise-based post-process shaders  </description>
    </item>
    
    <item>
      <title>Rasterizer and Camera</title>
      <link>http://example.org/code_pages/rasterizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/rasterizer/</guid>
      <description>Rasterizer and Camera in C++ October 2021
Description: A 2D and 3D rasterizer with an interactive perspective camera.
Features:
 2D triangle rasterization with line-segment intersection testing Axis-aligned bounding boxes for optimization Barycentric interpolation Z-buffering Interactive camera Perspective-correct interpolation Texture mapping Lambertian reflection model  Extras:
 Iridescent and toon shading model implementation  </description>
    </item>
    
  </channel>
</rss>
