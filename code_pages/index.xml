<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code_pages on Megan Reddy</title>
    <link>http://example.org/code_pages/</link>
    <description>Recent content in Code_pages on Megan Reddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/code_pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU Path Tracer</title>
      <link>http://example.org/code_pages/pathtracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/pathtracer/</guid>
      <description>CPU Path Tracer March 2022
Description: A path tracer implemented using the Physically Based Rendering textbook.
Features:
 Full Lighting Integrator Russian Roulette ray termination Multiple Importance Sampling Diffuse, reflective, and transmissive materials Thin lens camera/depth of field Microfacet BRDF Area, point, and spot lights  </description>
    </item>
    
    <item>
      <title>Cubic Stylization Authoring Tool</title>
      <link>http://example.org/code_pages/cubestylization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/cubestylization/</guid>
      <description>Cubic Stylization Authoring Tool May 2022
Description: A Maya plugin for stylized 3D surface deformation. Our authoring tool takes an input mush and deforms it to exhibit cube-like geometry while preserving surface detail. This was developed with teammate Nick Moon.
Paper: Cubic Stylization, Hsueh-Ti Derek Liu and Alec Jacobson, SIGGRAPH Asia 2019
Features:
 Basic cubification of shapes through minimization of ARAP energy Extension to other polyhedral target shapes (tetrahedron, octahedron, etc.</description>
    </item>
    
    <item>
      <title>GPU Path Tracer</title>
      <link>http://example.org/code_pages/gpupath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/gpupath/</guid>
      <description>GPU Path Tracer April 2022
Description: An interactive GPU path tracer written in GLSL.
Features:
 Full Lighting Integrator Diffuse, specular, and transmissive materials Signed distance functions Environment lighting Procedurally-generated textures Albedo and normal mapping Thin lens camera/depth of field  </description>
    </item>
    
    <item>
      <title>Mini Maya</title>
      <link>http://example.org/code_pages/maya/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/maya/</guid>
      <description>Micro Maya Mesh Editor in C++ October 2021
Description: A mesh editor application in the style of Autodesk Maya.
Features:
 Half-edge mesh data structure implementation Interactive GUI for selecting vertices, faces, and half-edges in the mesh Topology editing functions, including split edge and triangulation Catmull-Clark subdivision for mesh smoothing Face extrusion JSON/OBJ file importing Bind skeleton to mesh Linear blend skinning  </description>
    </item>
    
    <item>
      <title>Mini Minecraft</title>
      <link>http://example.org/code_pages/minecraft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/minecraft/</guid>
      <description>Mini Minecraft December 2021
Description: An implementation of the popular 3D world exploration game Minecraft and based on the TV series Avatar: The Last Airbender. This was a group project with two other students.
My Contributions:
 Procedural terrain Mountain, grassland, island, and tundra biomes Multithreaded terrain generation Procedural sky Procedural assets (crystals, boats, trees) Lava and green crystal placement (glow implemented by teammate)  </description>
    </item>
    
    <item>
      <title>OpenGL Shaders</title>
      <link>http://example.org/code_pages/opengl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/opengl/</guid>
      <description>OpenGL Shaders in C++ and GLSL October 2021
Description: An implementation of various OpenGL surface and post-process shaders.
Features (in order of appearance):
 Surface shaders: Blinn-Phong, Matcap, Iridescent Vertex deformation shader using Fractal Brownian Motion Post-process shaders: Greyscale and Vignette, Gaussian Blur, Sobel Filter, Bloom Two Worley noise-based post-process shaders  </description>
    </item>
    
    <item>
      <title>Rasterizer and Camera</title>
      <link>http://example.org/code_pages/rasterizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/rasterizer/</guid>
      <description>Rasterizer and Camera in C++ October 2021
Description: A 2D and 3D rasterizer with an interactive perspective camera.
Features:
 2D triangle rasterization with line-segment intersection testing Axis-aligned bounding boxes for optimization Barycentric interpolation Z-buffering Interactive camera Perspective-correct interpolation Texture mapping Lambertian reflection model  Extras:
 Iridescent and toon shading model implementation  </description>
    </item>
    
  </channel>
</rss>
