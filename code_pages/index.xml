<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code_pages on Megan Reddy</title>
    <link>http://example.org/code_pages/</link>
    <description>Recent content in Code_pages on Megan Reddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/code_pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3D Rasterizer</title>
      <link>http://example.org/code_pages/rasterizer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/rasterizer/</guid>
      <description>3D Rasterizer in Python October 2020
Description: For my Introduction to Computer Graphics class at the University of Virginia, I created a 3D rasterizer that implements the pipeline for rasterizing triangles.
Features:
 Transformations (model/view, projection, rotation, translation, scaling, and lookat) Per-pixel clipping - pixels with a z-value less than 0 or greater than 1 are not drawn Depth buffer check Implements DDA algorithm for drawing lines Supports sun lights coming from a specified direction Allows an arbitrary number of lights and sums their contributions Uses Lambert&amp;rsquo;s Law for illumination  Improvements:</description>
    </item>
    
    <item>
      <title>Curve Editor</title>
      <link>http://example.org/code_pages/curveeditor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/curveeditor/</guid>
      <description>Animation Curve Editor in C++ October 2021
Description: An interactive animation and spline curve editor with a Unity plugin.
Features:
 Linear, cubic Catmull-Rom, and Hermite spline interpolation Three Bezier curve computation methods: Bernstein polynomials, de Casteljau, Matrix method Euler angle and quaternion spline interpolation  </description>
    </item>
    
    <item>
      <title>Mini Maya</title>
      <link>http://example.org/code_pages/maya/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/maya/</guid>
      <description>Micro Maya Mesh Editor in C++ October 2021
Description: A mesh editor application in the style of Autodesk Maya.
Features:
 Half-edge mesh data structure implementation Interactive GUI for selecting vertices, faces, and half-edges in the mesh Topology editing functions, including split edge and triangulation Catmull-Clark subdivision for mesh smoothing Face extrusion OBJ file importing  In-Progress:
 Bind skeleton to mesh Linear blend skinning JSON file importing  </description>
    </item>
    
    <item>
      <title>Monte Carlo Path Tracer</title>
      <link>http://example.org/code_pages/pathtracer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/pathtracer/</guid>
      <description>Monte Carlo Path Tracer in C++ November 2020
Utah Teapot (50 samples)
Description: For my final project in Introduction to Computer Graphics at the University of Virginia, I extended a ray tracer I wrote into a unidirectional path tracer. I translated my original Python implementation into C++ for improved performance.
Features:
 Monte Carlo sampling for global illumination Sampling of area lights (produces soft shadows) Color bleeding Gamma correction Ray-sphere, triangle, plane, and rectangle intersections Diffuse, reflective, and refractive materials  Improvements:</description>
    </item>
    
    <item>
      <title>OpenGL Shaders</title>
      <link>http://example.org/code_pages/opengl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/opengl/</guid>
      <description>OpenGL Shaders in C++ and GLSL October 2021
Description: An implementation of various OpenGL surface and post-process shaders.
Features (in order of appearance):
 Surface shaders: Blinn-Phong, Matcap, Iridescent Vertex deformation shader using Fractal Brownian Motion Post-process shaders: Greyscale and Vignette, Gaussian Blur, Sobel Filter, Bloom Two Worley noise-based post-process shaders  </description>
    </item>
    
    <item>
      <title>Rasterizer and Camera</title>
      <link>http://example.org/code_pages/rasterizer2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/code_pages/rasterizer2/</guid>
      <description>Rasterizer and Camera in C++ October 2021
Description: A 2D and 3D rasterizer with an interactive perspective camera.
Features:
 2D triangle rasterization with line-segment intersection testing Axis-aligned bounding boxes for optimization Barycentric interpolation Z-buffering Interactive camera Perspective-correct interpolation Texture mapping Lambertian reflection model  Extras:
 Iridescent and toon shading model implementation  </description>
    </item>
    
  </channel>
</rss>
